/*@font-face {
    font-family: 'Fortnite';
    src: url('font/BurbankBigCondensed-Black.otf');
}*/

@media (max-width: 768px) {
    .container {
        width: 90% !important;
    }
    #containerKulonbseg {
        width: 90% !important;
    }
}

body {
    background-color: #000000;
    backdrop-filter: blur(5px);
    background-repeat: no-repeat;
    background-size: cover;
    background-attachment: fixed;
}

h1
{
    box-shadow: 5px 5px 5px #000000;
    background-color: rgba(255, 255, 255, 0.7);
    padding: 10px;
    width: 50%;
    margin: 20px auto;
    text-align: center;
    text-transform: uppercase;
    letter-spacing: 5px;
    border-radius: 15px;
}

button {
    margin: auto;
    display: block;
    border-radius: 15px;
    padding: 10px 28px;
    background-color: rgb(0,0,255);
    color: white;
    border: 3px solid black;
}

button:hover {
    background-color: green;
}

button.disabled {
    background-color: rgb(255,0,0);
}

.container-wrapper {
    display: flex;
    justify-content: center;
  }

.container {
    align-items: center;
    justify-content: center;
    box-shadow: 5px 5px 5px #000000;
    background-color: rgba(255, 255, 255, 0.7);
    width: 35%;
    border-radius: 15px;
    padding: 10px;
    margin: 25px auto;
}

#containerKulonbseg {
    width: 20%;
}

li {
    margin: 0 auto;
    text-align: justify;
    font-weight: bold;
    list-style: none;
    padding-left: 20px;
}

p, h3{
    margin: 0 auto;
    text-align: right;
    font-weight: bold;
    padding: 15px;
}

h3{
    text-align: left;
}

/*
    if(addedItemsCount.length != 0 || deletedItemsCount.length != 0){

        if(!document.getElementById("containerKulonbseg")){
            let div = document.createElement("div");
            div.classList.add("container");
            div.id = "containerKulonbseg";
            document.getElementById("body").appendChild(div);
        }
        else {
            document.getElementById("containerKulonbseg").innerHTML = "";
        }
    }

    if(addedItemsCount.length != 0){
        
        let h3h = document.createElement("h3");
        h3h.id = "hozzaadott";
        h3h.innerText = "HozzÃ¡adott tabok:"
        document.getElementById("containerKulonbseg").appendChild(h3h);
        
        let ulh = document.createElement("ul");
        ulh.id = "tabokHozzaadott";
        ulh.innerHTML = "";
        document.getElementById("containerKulonbseg").appendChild(ulh);


        for (const key in addedItemsCount) {
            let lih = document.createElement("li");
            lih.innerText = key + " (" + addedItemsCount[key] + "x)";
            document.getElementById("tabokHozzaadott").appendChild(lih);
        }
    }
    
    if(deletedItemsCount.length != 0){

        let h3k = document.createElement("h3");
        h3k.id = "kivett";
        h3k.innerText = "Kivett tabok:"
        document.getElementById("containerKulonbseg").appendChild(h3k);

        let ulk = document.createElement("ul");
        ulk.id = "tabokKivett";
        ulk.innerHTML = "";
        document.getElementById("containerKulonbseg").appendChild(ulk);
        
        for (const key in deletedItemsCount) {
            let lik = document.createElement("li");
            lik.innerText = key + " (" + deletedItemsCount[key] + "x)";
            document.getElementById("tabokKivett").appendChild(lik);
        }
    }
    */

    /*
        const addedItems = Object.keys(nextTabok).filter((key) => !currentTabok.hasOwnProperty(key));
    const addedItemsCount = addedItems.reduce((acc, key) => {
      acc[key] = nextTabok[key];
      return acc;
    }, {});
    
    console.log("Added items:");
    console.log(addedItemsCount);
    
    const deletedItems = Object.keys(currentTabok).filter((key) => !nextTabok.hasOwnProperty(key));
    const deletedItemsCount = deletedItems.reduce((acc, key) => {
      acc[key] = currentTabok[key];
      return acc;
    }, {});
    
    console.log("Deleted items:");
    console.log(deletedItemsCount);
    */